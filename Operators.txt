Python Operators (7)
Operators are used to perform operations on variables and values.
Sure! Below is a brief overview of different types of operators in Python, along with simple explanations and examples.

### 1. Arithmetic Operators
Arithmetic operators are used to perform mathematical operations.

| Operator | Description          | Example            | Result |
|----------|----------------------|--------------------|--------|
| `+`      | Addition             | `5 + 3`            | `8`    |
| `-`      | Subtraction          | `5 - 3`            | `2`    |
| `*`      | Multiplication       | `5 * 3`            | `15`   |
| `/`      | Division             | `5 / 2`            | `2.5`  |
| `//`     | Floor Division       | `5 // 2`           | `2`    |
| `%`      | Modulus (Remainder)  | `5 % 2`            | `1`    |
| `**`     | Exponentiation       | `2 ** 3`           | `8`    |

### 2. Assignment Operators
Assignment operators are used to assign values to variables.

| Operator | Description                       | Example        |
|----------|-----------------------------------|----------------|
| `=`      | Assigns value                    | `x = 5`        |
| `+=`     | Adds and assigns                 | `x += 3  # x = x + 3` |
| `-=`     | Subtracts and assigns            | `x -= 2  # x = x - 2` |
| `*=`     | Multiplies and assigns           | `x *= 3  # x = x * 3` |
| `/=`     | Divides and assigns              | `x /= 4  # x = x / 4` |
| `%=`     | Modulus and assigns              | `x %= 2  # x = x % 2` |

### 3. Comparison Operators
Comparison operators are used to compare values.

| Operator | Description          | Example        | Result   |
|----------|----------------------|----------------|----------|
| `==`     | Equal to             | `5 == 5`       | `True`   |
| `!=`     | Not equal to         | `5 != 3`       | `True`   |
| `>`      | Greater than         | `5 > 3`        | `True`   |
| `<`      | Less than            | `5 < 3`        | `False`  |
| `>=`     | Greater than or equal| `5 >= 5`       | `True`   |
| `<=`     | Less than or equal   | `3 <= 5`       | `True`   |

### 4. Logical Operators
Logical operators are used to combine conditional statements.

| Operator | Description | Example                 | Result   |
|----------|-------------|-------------------------|----------|
| `and`    | Returns True if both operands are True | `True and False`  | `False`  |
| `or`     | Returns True if at least one operand is True | `True or False`   | `True`   |
| `not`    | Returns True if the operand is False    | `not True`        | `False`  |

### 5. Identity Operators
Identity operators are used to check if two values refer to the same object.

| Operator | Description                  | Example          | Result   |
|----------|------------------------------|------------------|----------|
| `is`     | Returns True if both operands refer to the same object | `a is b`        | Depends  |
| `is not` | Returns True if operands do not refer to the same object | `a is not b`    | Depends  |

### 6. Membership Operators
Membership operators are used to test for membership in sequences (like lists, tuples, or strings).

| Operator | Description | Example              | Result   |
|----------|-------------|----------------------|----------|
| `in`     | Returns True if a value is found in a sequence | `5 in [1, 2, 3, 4, 5]` | `True`   |
| `not in` | Returns True if a value is not found in a sequence | `6 not in [1, 2, 3, 4, 5]` | `True`   |

### 7. Bitwise Operators
Bitwise operators are used to perform operations on binary representations of integers.

| Operator | Description | Example         | Result   |
|----------|-------------|-----------------|----------|
| `&`      | Bitwise AND | `5 & 3`         | `1`      |
| `|`      | Bitwise OR  | `5 | 3`         | `7`      |
| `^`      | Bitwise XOR | `5 ^ 3`         | `6`      |
| `~`      | Bitwise NOT | `~5`            | `-6`     |
| `<<`     | Left Shift  | `5 << 1`        | `10`     |
| `>>`     | Right Shift | `5 >> 1`        | `2`      |

### Summary
- **Arithmetic operators**: Perform mathematical operations.
- **Assignment operators**: Assign values to variables.
- **Comparison operators**: Compare values.
- **Logical operators**: Combine conditions.
- **Identity operators**: Check if two variables refer to the same object.
- **Membership operators**: Check for membership in data structures.
- **Bitwise operators**: Perform operations on binary numbers.


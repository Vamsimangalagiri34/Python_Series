In Python, lists are versatile and widely used data structures that can hold a collection of items. Hereâ€™s a comprehensive overview of the built-in methods available for lists along with a brief explanation of each:

### Basic List Methods

1. **append()**
   - **Usage**: `list.append(item)`
   - **Description**: Adds an item to the end of the list.
   - **Example**: 
     ```python
     my_list = [1, 2, 3]
     my_list.append(4)  # my_list becomes [1, 2, 3, 4]
     ```

2. **extend()**
   - **Usage**: `list.extend(iterable)`
   - **Description**: Extends the list by appending elements from an iterable (like another list).
   - **Example**:
     ```python
     my_list = [1, 2]
     my_list.extend([3, 4])  # my_list becomes [1, 2, 3, 4]
     ```

3. **insert()**
   - **Usage**: `list.insert(index, item)`
   - **Description**: Inserts an item at a specified index.
   - **Example**:
     ```python
     my_list = [1, 2, 4]
     my_list.insert(2, 3)  # my_list becomes [1, 2, 3, 4]
     ```

4. **remove()**
   - **Usage**: `list.remove(item)`
   - **Description**: Removes the first occurrence of a specified item. Raises a ValueError if the item is not found.
   - **Example**:
     ```python
     my_list = [1, 2, 3, 2]
     my_list.remove(2)  # my_list becomes [1, 3, 2]
     ```

5. **pop()**
   - **Usage**: `list.pop([index])`
   - **Description**: Removes and returns an item at a given index. If no index is specified, it removes and returns the last item.
   - **Example**:
     ```python
     my_list = [1, 2, 3]
     item = my_list.pop()  # item is 3, my_list becomes [1, 2]
     ```

6. **clear()**
   - **Usage**: `list.clear()`
   - **Description**: Removes all items from the list.
   - **Example**:
     ```python
     my_list = [1, 2, 3]
     my_list.clear()  # my_list becomes []
     ```

7. **index()**
   - **Usage**: `list.index(item[, start[, end]])`
   - **Description**: Returns the index of the first occurrence of an item. Raises a ValueError if the item is not found.
   - **Example**:
     ```python
     my_list = [1, 2, 3]
     index = my_list.index(2)  # index is 1
     ```

8. **count()**
   - **Usage**: `list.count(item)`
   - **Description**: Returns the number of occurrences of an item in the list.
   - **Example**:
     ```python
     my_list = [1, 2, 2, 3]
     count = my_list.count(2)  # count is 2
     ```

9. **sort()**
   - **Usage**: `list.sort(key=None, reverse=False)`
   - **Description**: Sorts the items of the list in place (the original list is modified).
   - **Example**:
     ```python
     my_list = [3, 1, 2]
     my_list.sort()  # my_list becomes [1, 2, 3]
     ```

10. **reverse()**
    - **Usage**: `list.reverse()`
    - **Description**: Reverses the elements of the list in place.
    - **Example**:
      ```python
      my_list = [1, 2, 3]
      my_list.reverse()  # my_list becomes [3, 2, 1]
      ```

11. **copy()**
    - **Usage**: `list.copy()`
    - **Description**: Returns a shallow copy of the list.
    - **Example**:
      ```python
      my_list = [1, 2, 3]
      new_list = my_list.copy()  # new_list is [1, 2, 3]
      ```

### Summary of Key Points
- Lists are ordered collections that can contain duplicate items.
- Lists can store items of different data types.
- Most list operations modify the list in place, while some return a new list or value.
  
Print the last item of the list:

thislist = ["apple", "banana", "cherry"]
print(thislist[-1]) 

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(thislist[2:5])

#This example returns the items from "orange" (-4) to, but NOT including "mango" (-1):

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(thislist[-4:-1])

Check if Item Exists
To determine if a specified item is present in a list use the in keyword:

Example
Check if "apple" is present in the list:

thislist = ["apple", "banana", "cherry"]
if "apple" in thislist:
  print("Yes, 'apple' is in the fruits list")

Change the second item:

thislist = ["apple", "banana", "cherry"]
thislist[1] = "blackcurrant"
print(thislist)

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "mango"]
thislist[1:3] = ["blackcurrant", "watermelon"]
print(thislist)

Remove Specified Index
The pop() method removes the specified index.

Example
Remove the second item:

thislist = ["apple", "banana", "cherry"]
thislist.pop(1)
print(thislist)

Remove the first item:

thislist = ["apple", "banana", "cherry"]
del thislist[0]
print(thislist)

Delete the entire list:

thislist = ["apple", "banana", "cherry"]
del thislist

Looping Using List Comprehension
List Comprehension offers the shortest syntax for looping through lists:

Example
A short hand for loop that will print all items in a list:

thislist = ["apple", "banana", "cherry"]
[print(x) for x in thislist]    #apple
                                #banana
                                #cherry

List Comprehension
List comprehension offers a shorter syntax when you want to create a new list based on the values of an existing list.

Example:

Based on a list of fruits, you want a new list, containing only the fruits with the letter "a" in the name.

Without list comprehension you will have to write a for statement with a conditional test inside:

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = []

for x in fruits:
  if "a" in x:
    newlist.append(x)

print(newlist)


With list comprehension you can do all that with only one line of code:

Example
fruits = ["apple", "banana", "cherry", "kiwi", "mango"]

newlist = [x for x in fruits if "a" in x]  #The Syntax
newlist = [expression for item in iterable if condition == True]

print(newlist)

Iterable

Example
Accept only numbers lower than 5:

newlist = [x for x in range(10) if x < 5]


thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
thislist.sort()

Sort the list descending:

thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
thislist.sort(reverse = True)
print(thislist)
